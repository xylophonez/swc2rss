"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractInteractionsLoader = void 0;
const _smartweave_1 = require("../../..");
const MAX_REQUEST = 100;
class ContractInteractionsLoader {
    constructor(arweave) {
        this.arweave = arweave;
        this.logger = _smartweave_1.LoggerFactory.INST.create('ContractInteractionsLoader');
    }
    async load(contractTxId, fromBlockHeight, toBlockHeight) {
        let variables = {
            tags: [
                {
                    name: _smartweave_1.SmartWeaveTags.APP_NAME,
                    values: ['SmartWeaveAction']
                },
                {
                    name: _smartweave_1.SmartWeaveTags.CONTRACT_TX_ID,
                    values: [contractTxId]
                }
            ],
            blockFilter: {
                max: toBlockHeight
            },
            first: MAX_REQUEST
        };
        let transactions = await this.getNextPage(variables);
        const txInfos = transactions.edges.filter((tx) => !tx.node.parent || !tx.node.parent.id);
        while (transactions.pageInfo.hasNextPage) {
            const cursor = transactions.edges[MAX_REQUEST - 1].cursor;
            variables = {
                ...variables,
                after: cursor
            };
            transactions = await this.getNextPage(variables);
            txInfos.push(...transactions.edges.filter((tx) => !tx.node.parent || !tx.node.parent.id));
        }
        this.logger.debug('All loaded interactions:', {
            from: fromBlockHeight,
            to: toBlockHeight,
            loaded: txInfos.length
        });
        return txInfos;
    }
    async getNextPage(variables) {
        const benchmark = _smartweave_1.Benchmark.measure();
        let response = await this.arweave.api.post('graphql', {
            query: ContractInteractionsLoader.query,
            variables
        });
        this.logger.debug('GQL page load:', benchmark.elapsed());
        while (response.status === 403) {
            this.logger.debug(`GQL rate limiting, waiting ${ContractInteractionsLoader._30seconds}ms before next try.`);
            await (0, _smartweave_1.sleep)(ContractInteractionsLoader._30seconds);
            response = await this.arweave.api.post('graphql', {
                query: ContractInteractionsLoader.query,
                variables
            });
        }
        if (response.status !== 200) {
            throw new Error(`Unable to retrieve transactions. Arweave gateway responded with status ${response.status}.`);
        }
        if (response.data.errors) {
            this.logger.error(response.data.errors);
            throw new Error('Error while loading interaction transactions');
        }
        const data = response.data;
        const txs = data.data.transactions;
        return txs;
    }
}
exports.ContractInteractionsLoader = ContractInteractionsLoader;
ContractInteractionsLoader.query = `query Transactions($tags: [TagFilter!]!, $blockFilter: BlockFilter!, $first: Int!, $after: String) {
    transactions(tags: $tags, block: $blockFilter, first: $first, sort: HEIGHT_ASC, after: $after) {
      pageInfo {
        hasNextPage
      }
      edges {
        node {
          id
          owner { address }
          recipient
          tags {
            name
            value
          }
          block {
            height
            id
            timestamp
          }
          fee { winston }
          quantity { winston }
          parent { id }
        }
        cursor
      }
    }
  }`;
ContractInteractionsLoader._30seconds = 30 * 1000;
//# sourceMappingURL=ContractInteractionsLoader.js.map