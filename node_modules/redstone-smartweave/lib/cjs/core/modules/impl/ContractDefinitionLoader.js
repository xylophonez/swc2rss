"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractDefinitionLoader = void 0;
const _smartweave_1 = require("../../..");
class ContractDefinitionLoader {
    constructor(arweave, 
    // TODO: cache should be removed from the core layer and implemented in a wrapper of the core implementation
    cache) {
        this.arweave = arweave;
        this.cache = cache;
        this.logger = _smartweave_1.LoggerFactory.INST.create('ContractDefinitionLoader');
    }
    async load(contractTxId, forcedSrcTxId) {
        var _a, _b, _c;
        if (!forcedSrcTxId && ((_a = this.cache) === null || _a === void 0 ? void 0 : _a.contains(contractTxId))) {
            this.logger.debug('ContractDefinitionLoader: Hit from cache!');
            return Promise.resolve((_b = this.cache) === null || _b === void 0 ? void 0 : _b.get(contractTxId));
        }
        const contract = await this.doLoad(contractTxId, forcedSrcTxId);
        (_c = this.cache) === null || _c === void 0 ? void 0 : _c.put(contractTxId, contract);
        return contract;
    }
    async doLoad(contractTxId, forcedSrcTxId) {
        const contractTx = await this.arweave.transactions.get(contractTxId);
        const owner = await this.arweave.wallets.ownerToAddress(contractTx.owner);
        const contractSrcTxId = forcedSrcTxId ? forcedSrcTxId : (0, _smartweave_1.getTag)(contractTx, _smartweave_1.SmartWeaveTags.CONTRACT_SRC_TX_ID);
        const minFee = (0, _smartweave_1.getTag)(contractTx, _smartweave_1.SmartWeaveTags.MIN_FEE);
        const contractSrcTx = await this.arweave.transactions.get(contractSrcTxId);
        const src = contractSrcTx.get('data', { decode: true, string: true });
        const initState = JSON.parse(await this.evalInitialState(contractTx));
        return {
            txId: contractTxId,
            srcTxId: contractSrcTxId,
            src,
            initState,
            minFee,
            owner
        };
    }
    async evalInitialState(contractTx) {
        if ((0, _smartweave_1.getTag)(contractTx, _smartweave_1.SmartWeaveTags.INIT_STATE)) {
            return (0, _smartweave_1.getTag)(contractTx, _smartweave_1.SmartWeaveTags.INIT_STATE);
        }
        else if ((0, _smartweave_1.getTag)(contractTx, _smartweave_1.SmartWeaveTags.INIT_STATE_TX)) {
            const stateTX = await this.arweave.transactions.get((0, _smartweave_1.getTag)(contractTx, _smartweave_1.SmartWeaveTags.INIT_STATE_TX));
            return stateTX.get('data', { decode: true, string: true });
        }
        else {
            return contractTx.get('data', { decode: true, string: true });
        }
    }
}
exports.ContractDefinitionLoader = ContractDefinitionLoader;
//# sourceMappingURL=ContractDefinitionLoader.js.map