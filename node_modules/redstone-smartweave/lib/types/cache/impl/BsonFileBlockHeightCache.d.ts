import { BlockHeightCacheResult, BlockHeightKey, BlockHeightSwCache } from '../index';
/**
 * An implementation of {@link BlockHeightSwCache} that stores its data in BSON files.
 * Data is flushed to disk every 10 new cache entries.
 *
 * Main use-case is the per block height state cache for contracts.
 *
 * A separate file is created for each block height - otherwise it was common to
 * hit 16 megabytes file size limit for bson files.
 *
 * At time of writing, completely cached state for all contracts, at all block heights,
 * was taking ~2.5GB of disk space :-).
 *
 * The files are organised in the following structure:
 * --/basePath
 *   --/txId_1
 *     --1.cache.bson
 *     --2.cache.bson
 *     ...
 *     --748832.cache.bson
 *   --/txId_2
 *     --1.cache.bson
 *     --323332.cache.bson
 * ...etc.
 *
 * Note: this is not performance-optimized for reading LARGE amount of contracts ;-)
 */
export declare class BsonFileBlockHeightSwCache<V = any> implements BlockHeightSwCache<V> {
    private readonly logger;
    private readonly storage;
    private updatedStorage;
    private saving;
    private putCounter;
    private readonly basePath;
    constructor(basePath?: string);
    private saveCache;
    getLast(key: string): Promise<BlockHeightCacheResult<V> | null>;
    getLessOrEqual(key: string, blockHeight: number): Promise<BlockHeightCacheResult<V> | null>;
    put({ cacheKey, blockHeight }: BlockHeightKey, value: V): Promise<void>;
    contains(key: string): Promise<boolean>;
    get(key: string, blockHeight: number): Promise<BlockHeightCacheResult<V> | null>;
}
//# sourceMappingURL=BsonFileBlockHeightCache.d.ts.map