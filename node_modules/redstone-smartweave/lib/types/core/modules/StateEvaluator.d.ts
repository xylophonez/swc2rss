import { ExecutionContext, GQLNodeInterface } from '../..';
/**
 * Implementors of this class are responsible for evaluating contract's state
 * - based on the execution context.
 */
export interface StateEvaluator {
    eval<State>(executionContext: ExecutionContext<State>, currentTx: {
        interactionTxId: string;
        contractTxId: string;
    }[]): Promise<EvalStateResult<State>>;
    onStateUpdate<State>(currentInteraction: GQLNodeInterface, executionContext: ExecutionContext<State>, state: EvalStateResult<State>): Promise<void>;
}
export declare class EvalStateResult<State> {
    readonly state: State;
    readonly validity: Record<string, boolean>;
    constructor(state: State, validity: Record<string, boolean>);
}
export declare class DefaultEvaluationOptions implements EvaluationOptions {
    ignoreExceptions: boolean;
    waitForConfirmation: boolean;
    fcpOptimization: boolean;
}
export interface EvaluationOptions {
    ignoreExceptions: boolean;
    waitForConfirmation: boolean;
    fcpOptimization: boolean;
}
//# sourceMappingURL=StateEvaluator.d.ts.map