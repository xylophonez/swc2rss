import { EvalStateResult, ExecutionContext, ExecutionContextModifier, GQLEdgeInterface, GQLNodeInterface, HandlerApi, StateEvaluator } from '../../..';
import Arweave from 'arweave';
export declare class DefaultStateEvaluator implements StateEvaluator {
    private readonly arweave;
    private readonly executionContextModifiers;
    private readonly logger;
    private readonly transactionStateCache;
    private readonly tagsParser;
    constructor(arweave: Arweave, executionContextModifiers?: ExecutionContextModifier[]);
    eval<State>(executionContext: ExecutionContext<State, HandlerApi<State>>, currentTx: {
        interactionTxId: string;
        contractTxId: string;
    }[]): Promise<EvalStateResult<State>>;
    protected doReadState<State>(missingInteractions: GQLEdgeInterface[], baseState: EvalStateResult<State>, executionContext: ExecutionContext<State, HandlerApi<State>>, currentTx: {
        interactionTxId: string;
        contractTxId: string;
    }[]): Promise<EvalStateResult<State>>;
    private logResult;
    private parseInput;
    onStateUpdate<State>(currentInteraction: GQLNodeInterface, executionContext: ExecutionContext<State, unknown>, state: EvalStateResult<State>): Promise<void>;
    onNextIteration<State>(currentInteraction: GQLNodeInterface, executionContext: ExecutionContext<State>): Promise<EvalStateResult<State>>;
}
//# sourceMappingURL=DefaultStateEvaluator.d.ts.map