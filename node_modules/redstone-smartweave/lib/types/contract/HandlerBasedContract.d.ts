import { ArTransfer, ArWallet, Contract, EvalStateResult, EvaluationOptions, InteractionResult, InteractionTx, SmartWeave, Tags } from '..';
import { NetworkInfoInterface } from 'arweave/node/network';
/**
 * An implementation of {@link Contract} that is backwards compatible with current style
 * of writing SW contracts (ie. using the "handle" function).
 *
 * It requires {@link ExecutorFactory} that is using {@link HandlerApi} generic type.
 */
export declare class HandlerBasedContract<State> implements Contract<State> {
    readonly contractTxId: string;
    protected readonly smartweave: SmartWeave;
    private readonly callingContract;
    private readonly logger;
    protected wallet?: ArWallet;
    private evaluationOptions;
    networkInfo?: NetworkInfoInterface;
    constructor(contractTxId: string, smartweave: SmartWeave, callingContract?: Contract);
    connect(wallet: ArWallet): Contract<State>;
    setEvaluationOptions(options: Partial<EvaluationOptions>): Contract<State>;
    readState(blockHeight?: number, currentTx?: {
        interactionTxId: string;
        contractTxId: string;
    }[]): Promise<EvalStateResult<State>>;
    viewState<Input, View>(input: Input, blockHeight?: number, tags?: Tags, transfer?: ArTransfer): Promise<InteractionResult<State, View>>;
    viewStateForTx<Input, View>(input: Input, transaction: InteractionTx): Promise<InteractionResult<State, View>>;
    writeInteraction<Input>(input: Input, tags?: Tags, transfer?: ArTransfer): Promise<string | null>;
    private waitForConfirmation;
    private createExecutionContext;
    private createExecutionContextFromTx;
    private maybeClearNetworkInfo;
    txId(): string;
}
//# sourceMappingURL=HandlerBasedContract.d.ts.map