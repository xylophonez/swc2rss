import { arrayToHex } from '../../..';
/**
 * implementation that is based on current's SDK sorting alg. (which seems to be wrong ;-))
 */
export class LexicographicalInteractionsSorter {
    constructor(arweave) {
        this.arweave = arweave;
    }
    async sort(transactions) {
        const copy = [...transactions];
        const addKeysFuncs = copy.map((tx) => this.addSortKey(tx));
        await Promise.all(addKeysFuncs);
        return copy.sort((a, b) => a.sortKey.localeCompare(b.sortKey));
    }
    async addSortKey(txInfo) {
        const { node } = txInfo;
        const blockHashBytes = this.arweave.utils.b64UrlToBuffer(node.block.id);
        const txIdBytes = this.arweave.utils.b64UrlToBuffer(node.id);
        const concatenated = this.arweave.utils.concatBuffers([blockHashBytes, txIdBytes]);
        const hashed = arrayToHex(await this.arweave.crypto.hash(concatenated));
        const blockHeight = `000000${node.block.height}`.slice(-12);
        txInfo.sortKey = `${blockHeight},${hashed}`;
    }
}
//# sourceMappingURL=LexicographicalInteractionsSorter.js.map